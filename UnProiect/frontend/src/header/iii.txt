LoginPage.js:
import React, { useState, useEffect, useContext } from "react";
import { FaEye, FaEyeSlash, FaExclamationTriangle } from "react-icons/fa";
import { AuthContext } from "../AuthContext";
import "./LoginPage.css";

function LoginPage(props) {
  
  const [emailOrUsername, setEmailOrUsername] = useState('');
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [emailOrUsernameError, setEmailOrUsernameError] = useState('');
  const [passwordError, setPasswordError] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [username, setUsername] = useState("");
  const { login } = useContext(AuthContext);

  useEffect(() => {
    // check if user is already authenticated
    const isAuthenticated = localStorage.getItem('isAuthenticated');
    const emailOrUsername = localStorage.getItem('emailOrUsername');
    const password = localStorage.getItem('password');
    console.log('isAuthenticated:', isAuthenticated);
    console.log('emailOrUsername:', emailOrUsername);
    console.log('password:', password);
  
    if (isAuthenticated && emailOrUsername && password) {
      login({ username });
      setEmailOrUsername(emailOrUsername);
      setPassword(password);
      setIsAuthenticated(true);
    }
  }, []);
  

  const handleSubmit = async (event) => {
    event.preventDefault();

    // validate email and password
    let valid = true;
    if (!emailOrUsername) {
      setEmailOrUsernameError("Please enter your email or username");
      valid = false;
    } else {
      setEmailOrUsernameError("");
    }

    if (!password) {
      setPasswordError("Please enter your password");
      valid = false;
    } else {
      setPasswordError("");
    }

    if (valid) {
      try {
        const response = await fetch('http://localhost:4000/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ emailOrUsername, password })
        });

        const data = await response.json();

        if (data.success) {
          if (rememberMe) {
            localStorage.setItem('emailOrUsername', emailOrUsername);
            localStorage.setItem('password', password);
          }
          console.log(data);
          localStorage.setItem('isAuthenticated', true);
          setIsAuthenticated(true);
          props.handleLogin(username);
          console.log(username);
        } else {
          if (!data.success) {
            setEmailOrUsernameError('Invalid email/username or password');
          } else{ setEmailOrUsernameError('');}
        }
      } catch (error) {
        console.error(error);
      }
    }
  };
  
  if (isAuthenticated) {
    login({ username });
   window.location.href = '/';
    return null; // or redirect to dashboard using navigate('/')
  }
  return (
    
    <div className="login-page">
          <div className="login-logo">
          <img
            src="https://i.ibb.co/vYfRpG1/aliexpress-logo.png"
            alt="AliExpress Logo"
          />
        </div>
      <div className="login-box">
        
        <form onSubmit={handleSubmit}>
        <div className="form-group">
  <label htmlFor="emailOrUsername">Email or Username</label>
  <div className="input-container">
    <input
      type="text"
      id="emailOrUsername"
      value={emailOrUsername}
      onChange={(event) => setEmailOrUsername(event.target.value)}
    />
    {emailOrUsernameError && (
      <div className="error-container">
        <div className="error-icon">
          <FaExclamationTriangle />
        </div>
        <div className="error-text">{emailOrUsernameError}</div>
      </div>
    )}
  </div>
</div>


<div className="form-group">
  <label htmlFor="password">Password</label>
  <div className="password-input-container">
    <input
      type={showPassword ? "text" : "password"}
      id="password"
      value={password}
      onChange={(event) => setPassword(event.target.value)}
    />
    {passwordError && (
      <div className="error-container">
        <div className="error-icon">
          <FaExclamationTriangle />
        </div>
        <div className="error-text">{passwordError}</div>
      </div>
    )}
    <div
      className="password-toggle-icon"
      onClick={() => setShowPassword(!showPassword)}
    >
      {showPassword ? <FaEyeSlash /> : <FaEye />}
    </div>
  </div>
</div>

          <button type="submit">Sign in</button>
          <div className="checkbox">
          <input 
            type="checkbox" 
            id="remember-me" 
            checked={rememberMe}
            onChange={() => setRememberMe(!rememberMe)}
          />Remember me
            <a href="/" className="forgot-password">
              Forgot password?
            </a>
          </div>
          <hr />
          <div className="signup">
            <p>New customer?</p>
            <a href="/register" className="signup-link">
              Join Free
            </a>
          </div>
        </form>
      </div>
    </div>
  );
}

export default LoginPage;

Account.js:
import React, { useState, useEffect } from "react";
import "./NavBar.css";
import { FaUserCircle, FaTimes } from "react-icons/fa";
import Modal from "react-modal";
import "./Account.css";
import Greeting from "../Greeting";

const customStyles = {
  overlay: {
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    zIndex: 1000,
  },
};

function Account(props) {
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [loggedIn, setLoggedIn] = useState(false); // state to keep track of whether the user is logged in
  const [username, setUsername] = useState(""); // state to store the user's username

  useEffect(() => {
    // check if user is already logged in
    const loggedInUser = localStorage.getItem("user");
    if (loggedInUser) {
      setLoggedIn(true);
      setUsername(loggedInUser);
    }
  }, []);

  // Function to handle successful login
  const handleLogin = (username) => {
    setLoggedIn(true);
    setUsername(username);
    localStorage.setItem("user", username); // save username to local storage
    console.log("User logged in:", username);
  };

  const handleLogout = () => {
    setLoggedIn(false);
    setUsername("");
    localStorage.removeItem("user"); // remove username from local storage
    console.log("User logged out");
  };

  return (
    <div className="App">
      <div
        className="reorder-my-items"
        onClick={() => setModalIsOpen(true)}
      >
        <FaUserCircle />
        <div>
          <span className="reorder-text">Sign in</span>
          <span className="my-items-text">Account</span>
        </div>
      </div>
      <Modal
        isOpen={modalIsOpen}
        onRequestClose={() => setModalIsOpen(false)}
        className="modal"
        style={customStyles}
      >
        <div className="modal-content">
          <div className="modal-header">
            <div className="modal-title">Account</div>
            <button
              className="close-btn"
              onClick={() => setModalIsOpen(false)}
            >
              <FaTimes />
            </button>
          </div>
          <hr className="modal-divider" />
          <div className="modal-body">
            <span onClick={() => (window.location.href = "/signin")}>
              Account
            </span>
            <span
              className="greeting-text"
              onClick={() => {
                if (!loggedIn) {
                  setModalIsOpen(false);
                  window.location.href = "/signin";
                }
              }}
            >
              <Greeting />
            </span>
          </div>
          <hr className="modal-divider" />
          <div className="modal-body">
            <span onClick={() => (window.location.href = "/signin")}>
              Recently Viewed
            </span>
            <span
              className="greeting-text"
              onClick={() => (window.location.href = "/signin")}
            >
              See items
            </span>
          </div>
          <hr className="modal-divider" />
          <div className="modal-body">
            {loggedIn && (
              <span onClick={handleLogout} className="logout-text">
                Log out
              </span>
            )}
          </div>
        </div>
      </Modal>
    </div>
  );
}

export default Account;

Greeting.js:
import React, { useContext } from 'react';
import { AuthContext } from './AuthContext';

function Greeting() {
  const { isAuthenticated, username } = useContext(AuthContext);
  console.log('isAuthenticated:', isAuthenticated); // add console.log here
  console.log('username:', username); // add console.log here

  return (
    <div>
      {isAuthenticated ? <p>Hello {username}</p> : <p>Hello, Guest</p>}
    </div>
  );
}

export default Greeting;

AuthContext.js:
import React, { useState, createContext } from "react";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (user) => {
    setUser(user);
  };

  const logout = () => {
    setUser(null);
  };
  console.log('user:', user);
  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};