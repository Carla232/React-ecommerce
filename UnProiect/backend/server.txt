const express = require("express");
const mysql = require("mysql");
const bodyParser = require("body-parser");
const cors = require('cors');

const app = express();
app.use(cors());

// create connection pool to MySQL database
const pool = mysql.createConnection({
  host: "localhost",
  user: "mans",
  password: "mans",
  database: "mans",
});

// create MySQL user using an API
app.post("/createUser", (req, res) => {
  const username = req.body.username;
  const password = req.body.password;

  // get a connection from the pool
  pool.getConnection((err, connection) => {
    if (err) {
      console.error(err);
      res.status(500).send("Database connection error.");
      return;
    }

    // create new user and grant privileges
    connection.query(`CREATE USER '${username}'@'localhost' IDENTIFIED WITH mysql_native_password BY '${password}'; GRANT ALL PRIVILEGES ON *.* TO '${username}'@'localhost'; FLUSH PRIVILEGES;`, (err, result) => {
      // release the connection back to the pool
      connection.release();
      if (err) {
        console.error(err);
        res.status(500).send("Error creating user.");
      } else {
        console.log(`User ${username} created successfully`);
        res.status(200).send(`User ${username} created successfully`);
      }
    });
  });
});

// create database using an API
app.post("/createDatabase", (req, res) => {
  const database = req.body.database;

  // get a connection from the pool
  pool.getConnection((err, connection) => {
    if (err) {
      console.error(err);
      res.status(500).send("Database connection error.");
      return;
    }
    console.log('Connected to MySQL server:', connection.config.host + ':' + connection.config.port);
  
    // Run the query to check the data directory
    connection.query('SELECT @@datadir;', function (error, results, fields) {
      if (error) throw error;
      console.log('Data directory:', results[0]['@@datadir']);});
    // create the database
    connection.query(`CREATE DATABASE ${database}`, (err, result) => {
      // release the connection back to the pool
      connection.release();
      if (err) {
        console.error(err);
        res.status(500).send("Error creating database.");
      } else {
        console.log(`Database ${database} created successfully`);
        res.status(200).send(`Database ${database} created successfully`);
      }
    });
  });
});

// configure body-parser to parse request bodies
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
// define a route to handle user registration
app.post("/users", (req, res) => {
  // extract user information from the request body
  const {name,username, email, password } = req.body;

  // insert the user information into the MySQL database
  const sql = "INSERT INTO users (name,username, email, password) VALUES (?,?, ?, ?)";
  connection.query(sql, [name,username, email, password], (err, result) => {
    if (err) throw err;
    console.log(`User ${username} registered with id ${result.insertId}`);

    // send a response back to the client
    res.json({ message: "User registered successfully" });
  });
});
// define a route to handle GET requests for user information
app.get("/users", (req, res) => {
  // extract email and username from the request query parameters
  const { email, username } = req.query;

  // check if email or username already exist in the database
  const checkSql = "SELECT * FROM users WHERE username = ? OR email = ?";
  connection.query(checkSql, [username, email], (err, rows) => {
    if (err) throw err;

    // if a matching username or email is found, return an error response
    if (rows.length > 0) {
      res.json({ exists: true });
    } else {
      res.json({ exists: false });
    }
  });
});

app.post("/login", (req, res) => {
  // extract email/username and password from the request body
  const { emailOrUsername, password } = req.body;

  // search for a user with the given email/username and password
  const sql = "SELECT * FROM users WHERE (email = ? OR username = ?) AND password = ?";
  connection.query(sql, [emailOrUsername, emailOrUsername, password], (err, rows) => {
    if (err) throw err;

    // if a matching user is found, send a success response
    if (rows.length > 0) {
      res.json({ success: true });
    } else {
      res.json({ success: false });
    }
  });
});


// start the server
const PORT = 5000;
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}...`);
});
